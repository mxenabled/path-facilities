plugins {
  id "idea"
  id "com.github.mxenabled.coppuccino" version "4.+" apply false
  id "com.github.mxenabled.vogue" version "1.+"
  id "io.freefair.lombok" version "8.+" apply false
  id "io.github.gradle-nexus.publish-plugin" version "1.1.+"
}

version "5.0.2" // x-release-please-version

def platformProject = "platform"

allprojects {
  if (it.name != platformProject) {
    apply plugin: "java"
  }

  group "com.mx.path-facilities"
  description "MX Path Facilities"
  version rootProject.version
  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  repositories {
    mavenCentral()
    mavenLocal()
    // maven {
    //   url "https://s01.oss.sonatype.org/content/repositories/snapshots/"
    //   mavenContent {
    //     snapshotsOnly()
    //   }
    // }
  }

  configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
  }

  ext {
    pathSDKVersion = "[4.0,5.0)"
  }
}

subprojects {
  if (it.name != platformProject) {
    apply plugin: "java-library"
    apply plugin: "groovy"
    apply plugin: "maven-publish"
    apply plugin: "signing"
    apply plugin: "com.github.mxenabled.coppuccino"
    apply plugin: "com.github.mxenabled.vogue"
    apply plugin: "io.freefair.lombok"

    dependencies {
      constraints {
        api "org.slf4j:slf4j-api:1.7.30"
      }

      implementation platform("com.mx.path-core:platform:${project.ext.pathSDKVersion}")
      implementation "com.mx.path-core:common"
      testImplementation "com.mx.path-core:testing"
      testImplementation "org.junit.jupiter:junit-jupiter-api:[5.9.0,5.10.0)"
    }

    test { useJUnitPlatform() }

    compileJava { options.compilerArgs << "-parameters" }

    sourceSets {
      test {
        groovy { srcDirs "src/test/groovy" }
        java { srcDirs "src/test/java" }
      }
    }

    javadoc {
      classpath = configurations.compileClasspath
      options {
        setMemberLevel JavadocMemberLevel.PUBLIC
        setAuthor true
      }
    }

    coppuccino {
      rootDir = "${projectDir}/"
      dependencies {
        excludePreReleaseVersions = true
      }
    }

    vogue {
      dependencyUpdatesOutputDir = "${projectDir}/build/dependencyUpdates"
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
      classifier = "sources"
      from sourceSets.main.allSource
    }

    task packageJavadoc(type: Jar) {
      classifier = "javadoc"
      from javadoc
    }

    artifacts {
      archives sourcesJar
      archives jar
      archives packageJavadoc
    }

    publishing {
      publications {
        maven(MavenPublication) {
          from components.java
          artifact sourcesJar
          artifact packageJavadoc

          pom {
            groupId = project.group
            artifactId = project.name
            name = project.name
            description = project.description
            url = "https://github.com/mxenabled/path-facilities"

            developers {
              developer {
                name = "MX"
                email = "path@mx.com"
                organization = "MX Technologies Inc."
                url = "http://www.mx.com"
              }
            }

            licenses {
              license {
                name = "Proprietary"
                url = "https://github.com/mxenabled/path-facilities/blob/master/LICENSE"
                distribution = "repo"
              }
            }

            scm {
              connection = "scm:git:git@github.com:mxenabled/path-facilities.git"
              url = "https://github.com/mxenabled/path-facilities/tree/master"
            }
          }
        }
      }
    }

    signing {
      def signingKey = findProperty("signingKey")
      def signingPassword = findProperty("signingKeyPassword")
      if (signingKey != null && signingKey != "") {
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications.maven
        logger.lifecycle("Configuring signing for ${project.name}")
      } else {
        logger.lifecycle("Skipping artifact signing for ${project.name} - missing signing key")
      }
    }
  }
}

nexusPublishing {
  def ossrhUserName = findProperty("ossrhUserName")
  def ossrhToken = findProperty("ossrhToken")

  repositories {
    central {
      nexusUrl = uri("https://s01.oss.sonatype.org/service/local/")
      snapshotRepositoryUrl = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
      username = ossrhUserName
      password = ossrhToken
    }
  }
}

task spotlessApply {
  subprojects.each {
    if (it.name != platformProject) {
      it.afterEvaluate {
        def spotlessApplyTask = it.tasks.findByName("spotlessApply")
        dependsOn(spotlessApplyTask)
      }
    }
  }
}

task subdependencies {
  subprojects.each {
    if (it.name != platformProject) {
      it.afterEvaluate {
        def dependenciesTask = it.tasks.findByName("dependencies")
        dependsOn(dependenciesTask)
      }
    }
  }
}

project.tasks.getByPath("dependencies").finalizedBy("subdependencies")
